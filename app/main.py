import telebot
from telebot import types
import os
from typing import Dict
from utils import *


API_TOKEN = os.environ["token"]

bot = telebot.TeleBot(API_TOKEN)

user_cache: Dict[int, CachedUser] = {}
id_to_match = {}


@bot.message_handler(commands=['start', 'change'])
def send_welcome(message):
    msg = bot.reply_to(
        message, "–ü—Ä–∏–≤–µ—Ç! –°–µ–π—á–∞—Å –º—ã –±—É–¥–µ–º —Ç–µ–±—è —à–∏–ø–ø–µ—Ä–∏—Ç—å. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—à—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /change)")
    bot.register_next_step_handler(msg, reg_get_name)


def reg_get_name(message):
    chat_id = message.chat.id
    name = message.text
    user_cache[chat_id] = CachedUser(name, chat_id, "", "", "", "")
    msg = bot.reply_to(message, '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ')
    bot.register_next_step_handler(msg, reg_get_bio)


def reg_get_bio(message):
    chat_id = message.chat.id

    user_cache[chat_id].bio = message.text

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add(*GENDER_INTERPRETATION.keys())
    msg = bot.reply_to(
        message, '–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–≤–æ–µ–º –ø–æ–ª–µ:', reply_markup=markup)
    bot.register_next_step_handler(msg, reg_get_sex)


def reg_get_sex(message):
    chat_id = message.chat.id

    if message.text not in GENDER_INTERPRETATION:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add(*GENDER_INTERPRETATION.keys())
        msg = bot.reply_to(
            message, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", reply_markup=markup)
        bot.register_next_step_handler(msg, reg_get_sex)
        return

    user_cache[chat_id].gender = GENDER_INTERPRETATION[message.text]

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add(*ORIENTATION_INTERPRETATION.keys())
    msg = bot.reply_to(
        message, "–ê —Ç–µ–ø–µ—Ä—å –æ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏", reply_markup=markup)

    bot.register_next_step_handler(msg, reg_get_orientation)


def reg_get_orientation(message):
    chat_id = message.chat.id

    if message.text not in ORIENTATION_INTERPRETATION:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add(*ORIENTATION_INTERPRETATION.keys())
        msg = bot.reply_to(
            message, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", reply_markup=markup)
        bot.register_next_step_handler(msg, reg_get_orientation)
        return

    user_cache[chat_id].orientation = ORIENTATION_INTERPRETATION[message.text]

    msg = bot.reply_to(
        message, "–ê —Ç–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å –º–Ω–µ —Å–≤–æ–µ —Ñ–æ—Ç–æ. –ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å —Å–∫–∏–¥—ã–≤–∞—Ç—å —Å–µ–±—è, –º–æ–∂–µ—à—å —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ —Å –∫–æ—Ç–∏–∫–æ–º, —è –ø–æ–π–º—É.")
    bot.register_next_step_handler(msg, reg_get_photo)


def reg_get_photo(message):
    chat_id = message.chat.id

    if message.content_type != "photo":
        msg = bot.reply_to(message, "–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ—á–∫–∞, –∞ –º–Ω–µ –Ω—É–∂–Ω–∞ —Ñ–æ—Ç–æ—á–∫–∞")
        bot.register_next_step_handler(msg, reg_get_photo)
        return

    user_cache[chat_id].photo_id = message.photo[0].file_id
    create_or_update_user(user_cache[chat_id])
    del user_cache[chat_id]
    get_option(message)


@bot.message_handler(commands=['next'])
def get_option(message):
    candidate = get_new_candidate(message.chat.id)
    if candidate is None:
        bot.reply_to(
            message, "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ —á–∞—Å–∏–∫ –∫–æ–º–∞–¥–Ω–æ–π /next")
        return

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add("‚ù§Ô∏è", "üíî")

    msg = bot.send_photo(
        message.chat.id, candidate["photo_id"], caption=f"{candidate['name']}\n{candidate['bio']}", reply_markup=markup)

    id_to_match[message.chat.id] = candidate["chat_id"]
    bot.register_next_step_handler(msg, analyze_option)


def analyze_option(message):
    if message.text not in ["‚ù§Ô∏è", "üíî"]:
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add("‚ù§Ô∏è", "üíî")
        msg = bot.reply_to(
            message, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞", reply_markup=markup)
        bot.register_next_step_handler(msg, analyze_option)
        return

    people_match(message.chat.id,
                 id_to_match[message.chat.id], message.text == "‚ù§Ô∏è")
                
    if is_it_match(message.chat.id, id_to_match[message.chat.id]):
        bot.send_message(
            message.chat.id, f"It's a match! –ü–∏—à–∏ —Å–∫–æ—Ä–µ–µ @{bot.get_chat(id_to_match[message.chat.id]).username}"
        )

        bot.send_message(
            id_to_match[message.chat.id], f"It's a match! –ü–∏—à–∏ —Å–∫–æ—Ä–µ–µ {message.from_user.username}"
        )

    bot.register_next_step_handler_by_chat_id(message.chat.id, get_option)


bot.polling()